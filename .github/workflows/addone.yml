name: PR Automation with Docker, Tests, Slack, and Approval

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pull-requests: write
  statuses: write
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build -t sample-nodejs-app .

      - name: Run Tests
        run: docker run --rm sample-nodejs-app npm test

  codeql:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ success() }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Build the code
        run: npm install

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: results/codeql-results.sarif

      - name: Create Results Directory
        run: mkdir -p results

      - name: CheckIfCodeQLOutputExists
        run: ls -R results || echo "No CodeQL results found."

      - name: Upload XML report to Slack
        if: ${{ success() && steps.CheckIfCodeQLOutputExists.outcome == 'success' }}
        run: |
          curl -F file=@results/codeql-results.sarif -F "initial_comment=CodeQL SARIF Report" \
          -F channels=${{ secrets.SLACK_CHANNEL }} \
          -H "Authorization: Bearer ${{ secrets.SLACK_TOKEN }}" https://slack.com/api/files.upload

  approval:
    runs-on: ubuntu-latest
    needs: codeql
    if: ${{ success() }}
    outputs:
      approved: ${{ steps.approval_check.outputs.approved }}  # Set the output variable

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Ensure code is checked out

      - name: Notify Slack - Approval Required
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "PR #${{ github.event.number }}: Build Passed. Approval Required. <${{ github.event.pull_request.html_url }}|Review and Approve PR>"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Wait for Approval (12 hours)
        id: approval_check  # Set an ID to reference this step later
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          END_TIME=$((SECONDS+43200))  # 12 hours in seconds
          
          while [ $SECONDS -lt $END_TIME ]; do
            # Check the approval status without the --token flag
            REVIEW_STATE=$(gh pr view $PR_NUMBER --json reviews --jq '.reviews | map(select(.author.login == "himanshu-tsm")) | .[0].state')

            echo "Review State: $REVIEW_STATE"

            if [ "$REVIEW_STATE" == "APPROVED" ]; then
              echo "approved=true" >> $GITHUB_OUTPUT  # Set output variable for approved
              exit 0  # Exit the loop immediately
            elif [ "$REVIEW_STATE" == "CHANGES_REQUESTED" ]; then
              echo "approved=false" >> $GITHUB_OUTPUT  # Set output variable for rejected
              exit 0  # Exit the loop immediately
            fi
            
            # Wait for 5 minutes before checking again
            sleep 300
          done
          
          # If we reach this point, it means we timed out without approval or rejection
          echo "approved=false" >> $GITHUB_OUTPUT  # Set output variable for timed out

  merge:
    runs-on: ubuntu-latest
    needs: approval
    if: ${{ needs.approval.outputs.approved == 'true' }}  # Correctly reference the output from the approval job

    steps:
      - name: Merge Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT }}  # Set the GitHub token using the PAT secret
        run: gh pr merge ${{ github.event.pull_request.number }} --merge

      - name: Notify Slack - PR Merged
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "PR #${{ github.event.number }}: Successfully Merged. <${{ github.event.pull_request.html_url }}|View Merged PR>"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
